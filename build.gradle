import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
}

minecraft {
	accessWidener "src/main/resources/quickcarpet.accesswidener"
}

def buildDate = new Date()
def branch = GitHelper.branch
def ci = System.getenv("CI") != null
def isDev = project.mod_version.endsWith('-dev')

if (isDev && !ci) {
	def df = new SimpleDateFormat(".yyyyMMdd.HHmmss")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	project.mod_version += df.format(buildDate)
}
if (branch != "master" && branch != "HEAD") {
	project.mod_version += "+" + branch.replaceAll("[+-]", '_')
}
if (isDev && ci) {
	project.mod_version += "+" + GitHelper.commit.substring(0, 7)
}
version = project.mod_version

allprojects {
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	archivesBaseName = project.name
	group = project.maven_group

	dependencies {
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}"
		modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

		// javax.annotation.Nullable/Nonnull
		compileOnly "com.google.code.findbugs:jsr305:3.0.1"

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	}

	test {
		useJUnitPlatform()
	}

	jar {
		from "${rootDir}/LICENSE.md"
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	processResources {
		def properties = [
			version: rootProject.version,
			api_version: project.api_version,
			malilib_version: project.malilib_version
		]
		inputs.properties properties

		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand properties
		}

		from(sourceSets.main.resources.srcDirs) {
			exclude "fabric.mod.json"
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = "sources"
		from sourceSets.main.allSource
	}
}

def malilib_mc_version = project.hasProperty('malilib_mc_version') ? project.malilib_mc_version : project.minecraft_version

repositories {
	maven {
		url 'https://masa.dy.fi/maven'
	}
	maven {
		url 'https://maven.terraformersmc.com/releases/'
	}
}

dependencies {
	implementation project(":quickcarpet-api")

	modImplementation "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api-base:${project.fabric_api_base_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-networking-v0:${project.fabric_networking_v0_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-registry-sync-v0:${project.fabric_registry_sync_v0_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	// JiJ fabric-resource-loader and quickcarpet-api
	include "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	afterEvaluate {
		include project(":quickcarpet-api")
	}

	modImplementation("fi.dy.masa.malilib:malilib-fabric-${malilib_mc_version}:${project.malilib_version}") {
		exclude module: "modmenu"
	}
}

remapJar.dependsOn(project(":quickcarpet-api").tasks.remapJar)

task generateJava(type: Copy) {
	group = 'build'
	description 'Generates Build.java'

	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	def templateContext = [
			version: project.version,
			timestamp: df.format(buildDate),
			branch: GitHelper.branch,
			commit: GitHelper.commit,
			working_dir_clean: GitHelper.status,
			minecraft_version: project.minecraft_version,
			yarn_mappings: project.yarn_mappings
	]
	inputs.properties templateContext // for gradle up-to-date check
	from 'src/template/java'
	into "$buildDir/generated/java"
	expand templateContext
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateJava

task dumpRules(type: JavaExec, dependsOn: jar) {
	group = JavaBasePlugin.DOCUMENTATION_GROUP
	description = 'Writes all rules to rules.md'

    workingDir = "run"
	classpath = sourceSets.main.runtimeClasspath
	print(classpath)
	main = "quickcarpet.settings.Settings"
	doLast {
		copy {
			from "run/rules.md"
			into "."
		}
	}
}

apply from: 'setupAuth.gradle'